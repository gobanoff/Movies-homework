{
	"info": {
		"_postman_id": "be53f981-5b89-48cf-95d7-99a2d71390b9",
		"name": "Moviestore-framework",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29400633",
		"_collection_link": "https://blue-astronaut-624575.postman.co/workspace/New-Team-Workspace~9f487206-f00e-4720-aad6-4a1d99e30eeb/collection/29400633-be53f981-5b89-48cf-95d7-99a2d71390b9?action=share&source=collection_link&creator=29400633"
	},
	"item": [
		{
			"name": "Case 1",
			"item": [
				{
					"name": "Create-movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    const requestData = JSON.parse(pm.request.body.raw);\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"    pm.expect(responseData).to.have.property('title',requestData.title);\r",
									"    pm.expect(responseData).to.have.property('production_date',requestData.production_date);\r",
									"    pm.expect(responseData).to.have.property('producer',requestData.producer);\r",
									"    pm.expect(responseData).to.have.property('rating',requestData.rating);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Production_date is in a valid date format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.production_date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"var responseJSON = pm.response.json();\r",
									"\r",
									"pm.test(\"Save properties of the request into variables\", function () {\r",
									"    pm.variables.set(\"movieId\", responseJSON.id);\r",
									"    pm.variables.set(\"movieTitle\", responseJSON.title);\r",
									"    pm.variables.set(\"movieProductionDate\", responseJSON.production_date);\r",
									"    pm.variables.set(\"movieProducer\", responseJSON.producer);\r",
									"    pm.variables.set(\"movieRating\", responseJSON.rating);\r",
									"});\r",
									"var template = `\r",
									"<style type=\"text/css\">\r",
									"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
									"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
									"    .tftable tr {background-color:#ffffff;}\r",
									"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
									"    .tftable tr:hover {background-color:#e0ffff;}\r",
									"</style>\r",
									"\r",
									"<table class=\"tftable\" border=\"1\">\r",
									"    <tr>\r",
									"        <th>Variable</th>\r",
									"        <th>Value</th>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Movie ID</td>\r",
									"        <td>{{response.id}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Title</td>\r",
									"        <td>{{response.title}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Production Date</td>\r",
									"        <td>{{response.production_date}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Producer</td>\r",
									"        <td>{{response.producer}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Rating</td>\r",
									"        <td>{{response.rating}}</td>\r",
									"    </tr>\r",
									"</table>\r",
									"`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    return {response: pm.response.json()}\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());\r",
									"// Save properties of the request into variables\r",
									"var responseJSON = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"movieId\", responseJSON.id);\r",
									"pm.environment.set(\"movieTitle\", responseJSON.title);\r",
									"pm.environment.set(\"movieProductionDate\", responseJSON.production_date);\r",
									"pm.environment.set(\"movieProducer\", responseJSON.producer);\r",
									"pm.environment.set(\"movieRating\", responseJSON.rating);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"title\": \"The Terminator\",\r\n        \"production_date\": \"1983-06-19\",\r\n        \"producer\": \"Gale Anne Hurd\",\r\n        \"rating\": 9.5}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/movies",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get-all-movies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is an array and not empty\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('array').and.to.have.lengthOf.at.least(1,\"array should not be empty\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"title\": \"The Terminator\",\r\n        \"production_date\": \"1983-06-19T20:00:00.000Z\",\r\n        \"producer\": \"Gale Anne Hurd\",\r\n        \"rating\": 9.5}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/movies",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete-movie-byId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"",
									"pm.test(\"Response status code is 204\", function () {",
									"  pm.response.to.have.status(204);",
									"});",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"pm.test(\"Response body is empty after deletion\", function () {",
									"    pm.expect(pm.response.text()).to.be.empty;",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/movies/{{movieId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movies",
								"{{movieId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get-movie-byId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"",
									"pm.test(\"Movie is deleted\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Movie not found\");",
									"});",
									"",
									"pm.test(\"Response status code is 404 after the movie is deleted by the specified ID\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/movies/{{movieId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movies",
								"{{movieId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Case 2",
			"item": [
				{
					"name": "Create-movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"    pm.expect(responseData).to.have.property('title');\r",
									"    pm.expect(responseData).to.have.property('production_date');\r",
									"    pm.expect(responseData).to.have.property('producer');\r",
									"    pm.expect(responseData).to.have.property('rating');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Production_date is in a valid date format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.production_date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"var responseJSON = pm.response.json();\r",
									"\r",
									"pm.test(\"Save properties of the request into variables\", function () {\r",
									"    pm.variables.set(\"movieId\", responseJSON.id);\r",
									"    pm.variables.set(\"movieTitle\", responseJSON.title);\r",
									"    pm.variables.set(\"movieProductionDate\", responseJSON.production_date);\r",
									"    pm.variables.set(\"movieProducer\", responseJSON.producer);\r",
									"    pm.variables.set(\"movieRating\", responseJSON.rating);\r",
									"});\r",
									"var template = `\r",
									"<style type=\"text/css\">\r",
									"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
									"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
									"    .tftable tr {background-color:#ffffff;}\r",
									"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
									"    .tftable tr:hover {background-color:#e0ffff;}\r",
									"</style>\r",
									"\r",
									"<table class=\"tftable\" border=\"1\">\r",
									"    <tr>\r",
									"        <th>Variable</th>\r",
									"        <th>Value</th>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Movie ID</td>\r",
									"        <td>{{response.id}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Title</td>\r",
									"        <td>{{response.title}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Production Date</td>\r",
									"        <td>{{response.production_date}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Producer</td>\r",
									"        <td>{{response.producer}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Rating</td>\r",
									"        <td>{{response.rating}}</td>\r",
									"    </tr>\r",
									"</table>\r",
									"`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    return {response: pm.response.json()}\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());\r",
									"// Save properties of the request into variables\r",
									"var responseJSON = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"movieId\", responseJSON.id);\r",
									"pm.environment.set(\"movieTitle\", responseJSON.title);\r",
									"pm.environment.set(\"movieProductionDate\", responseJSON.production_date);\r",
									"pm.environment.set(\"movieProducer\", responseJSON.producer);\r",
									"pm.environment.set(\"movieRating\", responseJSON.rating);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"title\": \"The Terminator\",\r\n        \"production_date\": \"1983-06-19\",\r\n        \"producer\": \"Gale Anne Hurd\",\r\n        \"rating\": 9.5}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/movies",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get-movie-byId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.to.have.status(200));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"    pm.expect(responseData).to.have.property('title');\r",
									"    pm.expect(responseData).to.have.property('production_date');\r",
									"    pm.expect(responseData).to.have.property('producer');\r",
									"    pm.expect(responseData).to.have.property('rating');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Production date is in a valid date format\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.have.property('production_date').that.is.a('string').and.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/movies/{{movieId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movies",
								"{{movieId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update-movie-rating",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Id, title, production_date, producer, and rating properties exist in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('title');",
									"    pm.expect(responseData).to.have.property('production_date');",
									"    pm.expect(responseData).to.have.property('producer');",
									"    pm.expect(responseData).to.have.property('rating');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \r\n    \"title\": \"The Terminator\",\r\n    \"production_date\": \"1983-06-19\",\r\n    \"producer\": \"Gale Anne Hurd\",\r\n    \"rating\": 9.1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/movies/{{movieId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movies",
								"{{movieId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get-movie-byId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.to.have.status(200));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"    pm.expect(responseData).to.have.property('title');\r",
									"     pm.expect(responseData).to.have.property('production_date');\r",
									"    pm.expect(responseData).to.have.property('producer');\r",
									"    pm.expect(responseData).to.have.property('rating');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/movies/{{movieId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movies",
								"{{movieId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}